#!/usr/bin/env node

/**
 * Environment Setup Script for MTT Qurban Website
 * This script helps create the .env.local file with your Supabase credentials
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üîß MTT Qurban Website - Environment Setup');
console.log('==========================================\n');

console.log('This script will help you create the .env.local file with your Supabase credentials.');
console.log('You can find these values in your Supabase dashboard:\n');
console.log('1. Go to https://supabase.com/dashboard');
console.log('2. Select your project');
console.log('3. Go to Settings > API\n');

const questions = [
  {
    key: 'VITE_SUPABASE_URL',
    prompt: 'Enter your Supabase Project URL (https://your-project-id.supabase.co): ',
    validate: (value) => value.includes('supabase.co')
  },
  {
    key: 'VITE_SUPABASE_ANON_KEY',
    prompt: 'Enter your Supabase Anonymous Key: ',
    validate: (value) => value.length > 50
  },
  {
    key: 'SUPABASE_SERVICE_ROLE_KEY',
    prompt: 'Enter your Supabase Service Role Key (keep this secret!): ',
    validate: (value) => value.length > 50
  }
];

async function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question.prompt, (answer) => {
      if (question.validate && !question.validate(answer.trim())) {
        console.log('‚ùå Invalid input. Please try again.\n');
        resolve(askQuestion(question));
      } else {
        resolve(answer.trim());
      }
    });
  });
}

async function main() {
  const envVars = {};
  
  for (const question of questions) {
    envVars[question.key] = await askQuestion(question);
    console.log('‚úÖ Saved\n');
  }
  
  // Create .env.local content
  const envContent = `# Supabase Configuration for MTT Qurban Website
# Generated by setup-env.js on ${new Date().toISOString()}

# Supabase Project URL
${envVars.VITE_SUPABASE_URL ? `VITE_SUPABASE_URL=${envVars.VITE_SUPABASE_URL}` : '# VITE_SUPABASE_URL=https://your-project-id.supabase.co'}

# Supabase Anonymous Key
${envVars.VITE_SUPABASE_ANON_KEY ? `VITE_SUPABASE_ANON_KEY=${envVars.VITE_SUPABASE_ANON_KEY}` : '# VITE_SUPABASE_ANON_KEY=your-anon-key-here'}

# Supabase Service Role Key (for admin operations, keep this secret!)
${envVars.SUPABASE_SERVICE_ROLE_KEY ? `SUPABASE_SERVICE_ROLE_KEY=${envVars.SUPABASE_SERVICE_ROLE_KEY}` : '# SUPABASE_SERVICE_ROLE_KEY=your-service-role-key-here'}
`;

  // Write to .env.local
  const envPath = path.join(process.cwd(), '.env.local');
  
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('üéâ Environment file created successfully!');
    console.log(`üìÅ File location: ${envPath}`);
    console.log('\n‚ö†Ô∏è  IMPORTANT SECURITY NOTES:');
    console.log('- Never commit .env.local to version control');
    console.log('- Keep your Service Role Key secret');
    console.log('- The .env.local file is already in .gitignore\n');
    console.log('‚úÖ You can now run: npm run dev');
  } catch (error) {
    console.error('‚ùå Error creating .env.local file:', error.message);
    console.log('\nüìù Manual setup required:');
    console.log('Create a file named .env.local in your project root with this content:\n');
    console.log(envContent);
  }
  
  rl.close();
}

main().catch(console.error); 